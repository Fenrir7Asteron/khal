============================= test session starts =============================
platform win32 -- Python 3.6.4, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 -- c:\users\admin\appdata\local\programs\python\python36-32\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\ADMIN\Desktop\Study\khal
collecting ... collected 52 items

automated_tests/parse_datetime_test.py::TestWeekdaypstr::test_valid_weekdays PASSED [  1%]
automated_tests/parse_datetime_test.py::TestWeekdaypstr::test_invalid_weekdays PASSED [  3%]
automated_tests/parse_datetime_test.py::TestConstructDaynames::test_today PASSED [  5%]
automated_tests/parse_datetime_test.py::TestConstructDaynames::test_tomorrow PASSED [  7%]
automated_tests/parse_datetime_test.py::TestConstructDaynames::test_yesterday PASSED [  9%]
automated_tests/parse_datetime_test.py::TestDatetimefstr::test_no_default_day PASSED [ 11%]
automated_tests/parse_datetime_test.py::TestDatetimefstr::test_default_day PASSED [ 13%]
automated_tests/parse_datetime_test.py::TestDatetimefstr::test_no_infer_year PASSED [ 15%]
automated_tests/parse_datetime_test.py::TestDatetimefstr::test_non_leap_29_february PASSED [ 17%]
automated_tests/parse_datetime_test.py::TestCalcDay::test_today PASSED   [ 19%]
automated_tests/parse_datetime_test.py::TestCalcDay::test_tomorrow PASSED [ 21%]
automated_tests/parse_datetime_test.py::TestCalcDay::test_yesterday PASSED [ 23%]
automated_tests/parse_datetime_test.py::TestCalcDay::test_sunday PASSED  [ 25%]
automated_tests/parse_datetime_test.py::TestDatefstrWeekday::test_empty PASSED [ 26%]
automated_tests/parse_datetime_test.py::TestDatefstrWeekday::test_monday PASSED [ 28%]
automated_tests/parse_datetime_test.py::TestDatetimefstrWeekday::test_empty PASSED [ 30%]
automated_tests/parse_datetime_test.py::TestDatetimefstrWeekday::test_monday PASSED [ 32%]
automated_tests/parse_datetime_test.py::TestGuessdatetimefstr::test_monday_date PASSED [ 34%]
automated_tests/parse_datetime_test.py::TestGuessdatetimefstr::test_time PASSED [ 36%]
automated_tests/parse_datetime_test.py::TestGuessdatetimefstr::test_end_of_day PASSED [ 38%]
automated_tests/parse_datetime_test.py::TestGuessdatetimefstr::test_now PASSED [ 40%]
automated_tests/parse_datetime_test.py::TestGuessdatetimefstr::test_today PASSED [ 42%]
automated_tests/parse_datetime_test.py::TestGuessdatetimefstr::test_monday_datetime PASSED [ 44%]
automated_tests/parse_datetime_test.py::TestGuessdatetimefstr::test_date PASSED [ 46%]
automated_tests/parse_datetime_test.py::TestGuessdatetimefstr::test_invalid PASSED [ 48%]
automated_tests/parse_datetime_test.py::TestTimedelta2str::test_negative PASSED [ 50%]
automated_tests/parse_datetime_test.py::TestTimedelta2str::test_seconds PASSED [ 51%]
automated_tests/parse_datetime_test.py::TestTimedelta2str::test_minutes PASSED [ 53%]
automated_tests/parse_datetime_test.py::TestRrulefstr::test_every_monday PASSED [ 55%]
automated_tests/parse_datetime_test.py::TestRrulefstr::test_daily PASSED [ 57%]
automated_tests/parse_datetime_test.py::TestRrulefstr::test_invalid PASSED [ 59%]
automated_tests/parse_datetime_test.py::TestGuesstimedeltafstr::test_usual PASSED [ 61%]
automated_tests/parse_datetime_test.py::TestGuesstimedeltafstr::test_invalid PASSED [ 63%]
automated_tests/parse_datetime_test.py::TestGuesstimedeltafstr::test_invalid_unit PASSED [ 65%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_datetime_plus_timedelta PASSED [ 67%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_date PASSED [ 69%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_datetime PASSED [ 71%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_datetime_plus_end_of_day PASSED [ 73%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_datetime_to_datetime PASSED [ 75%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_date_to_date PASSED [ 76%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_date_to_datetime FAILED [ 78%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_date_to_the_past PASSED [ 80%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_datetime_to_the_past PASSED [ 82%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_wrong_order PASSED [ 84%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_no_year PASSED [ 86%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_empty PASSED [ 88%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_date_plus_timedelta PASSED [ 90%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_plus_zero PASSED [ 92%]
automated_tests/parse_datetime_test.py::TestGuessrangefstr::test_week FAILED [ 94%]
automated_tests/parse_datetime_test.py::TestEventinfofstr::test_description PASSED [ 96%]
automated_tests/parse_datetime_test.py::TestEventinfofstr::test_allday FAILED [ 98%]
automated_tests/parse_datetime_test.py::TestEventinfofstr::test_invalid PASSED [100%]

================================== FAILURES ===================================
__________________ TestGuessrangefstr.test_date_to_datetime ___________________

self = <automated_tests.parse_datetime_test.TestGuessrangefstr object at 0x048739F0>

    def test_date_to_datetime(self):
        # TODO: bug that when START is allday and END is not it adds additional day to end, but it should not
>       assert guessrangefstr(
            ['2019/03/10', '2020/03/12-10:30'], LOCALE_NEW_YORK,
            default_timedelta_date=datetime.timedelta(days=1),
            default_timedelta_datetime=datetime.timedelta(hours=1),
            adjust_reasonably=True
        ) == (datetime.datetime(2019, 3, 10), datetime.datetime(2019, 3, 12, 10, 30), True)
E       assert (FakeDatetime...10, 30), True) == (FakeDatetime...10, 30), True)
E         At index 1 diff: FakeDatetime(2019, 3, 13, 10, 30) != FakeDatetime(2019, 3, 12, 10, 30)
E         Full diff:
E         - (FakeDatetime(2019, 3, 10, 0, 0), FakeDatetime(2019, 3, 13, 10, 30), True)
E         ?                                                          ^
E         + (FakeDatetime(2019, 3, 10, 0, 0), FakeDatetime(2019, 3, 12, 10, 30), True)
E         ?                                                          ^

automated_tests\parse_datetime_test.py:242: AssertionError
________________________ TestGuessrangefstr.test_week _________________________

self = <automated_tests.parse_datetime_test.TestGuessrangefstr object at 0x04916A70>

    def test_week(self):
        # TODO: Check why there are 8 days in a week. May be a bug, may be some strange logic.
>       assert guessrangefstr('week', LOCALE_NEW_YORK) == \
               (datetime.datetime(2020, 3, 1), datetime.datetime(2020, 3, 8), True)
E       assert (FakeDatetime..., 0, 0), True) == (FakeDatetime..., 0, 0), True)
E         At index 1 diff: FakeDatetime(2020, 3, 9, 0, 0) != FakeDatetime(2020, 3, 8, 0, 0)
E         Full diff:
E         - (FakeDatetime(2020, 3, 1, 0, 0), FakeDatetime(2020, 3, 9, 0, 0), True)
E         ?                                                        ^
E         + (FakeDatetime(2020, 3, 1, 0, 0), FakeDatetime(2020, 3, 8, 0, 0), True)
E         ?                                                        ^

automated_tests\parse_datetime_test.py:303: AssertionError
________________________ TestEventinfofstr.test_allday ________________________

self = <automated_tests.parse_datetime_test.TestEventinfofstr object at 0x04873DB0>

    def test_allday(self):
        # TODO: Check that resetting timezone to None if allday is a bug.
>       assert eventinfofstr(
            '2020/03/10 America/New_York Summary',
            LOCALE_NEW_YORK,
            adjust_reasonably=True
        ) == {
                   'dtstart': datetime.date(2020, 3, 10),
                   'dtend': datetime.date(2020, 3, 11),
                   'summary': 'Summary',
                   'description': None,
                   'timezone': NEW_YORK,
                   'allday': True
               }
E       AssertionError: assert {'allday': Tr..., 3, 10), ...} == {'allday': Tr..., 3, 10), ...}
E         Omitting 5 identical items, use -vv to show
E         Differing items:
E         {'timezone': None} != {'timezone': <DstTzInfo 'America/New_York' LMT-1 day, 19:04:00 STD>}
E         Full diff:
E           {
E            'allday': True,
E            'description': None,...
E         
E         ...Full output truncated (7 lines hidden), use '-vv' to show

automated_tests\parse_datetime_test.py:328: AssertionError
======================== 3 failed, 49 passed in 0.63s =========================
